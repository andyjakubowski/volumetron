{"version":3,"sources":["components/UnitBox/UnitBox.module.css","components/ToolBar/ToolBar.module.css","components/UnitConverter/UnitConverter.module.css","components/UnitBox/UnitBox.js","components/ToolBar/ToolBar.js","components/UnitConverter/UnitConverter.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","UnitBox","props","className","styles","FieldWrapper","type","name","unit","Field","value","onChange","onValueChange","Label","Actions","steps","map","step","key","Action","onClick","event","onStepClick","ActionIcon","ToolBar","ResetButton","UNITS","RATIOS","mL","teaspoon","tablespoon","cup","pint","quart","gallon","STEPS","isValidValue","stringValue","numberValue","Number","isNaN","defaultState","mg","activeUnit","activeUnitValue","UnitConverter","state","handleValueChange","bind","handleStepChange","handleResetClick","this","resetState","setState","target","preventDefault","newMgValue","currentTarget","unitValue","UnitBoxList","toFixed","formatUnitValue","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bbbb5c20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"UnitBox\":\"UnitBox_UnitBox__2UiUU\",\"FieldWrapper\":\"UnitBox_FieldWrapper__3eyu7\",\"Field\":\"UnitBox_Field__aHZYx\",\"Label\":\"UnitBox_Label__eIX0Z\",\"Actions\":\"UnitBox_Actions__36h6K\",\"Action\":\"UnitBox_Action__2EvLt\",\"ActionIcon\":\"UnitBox_ActionIcon__3SCf8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToolBar\":\"ToolBar_ToolBar__1sCtH\",\"ResetButton\":\"ToolBar_ResetButton__202Zj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UnitBoxList\":\"UnitConverter_UnitBoxList__Tz_Ru\"};","import React from \"react\";\nimport styles from \"./UnitBox.module.css\";\n\nconst UnitBox = function UnitBox(props) {\n  return (\n    <div className={styles.UnitBox}>\n      <div className={styles.FieldWrapper}>\n        <input\n          type=\"text\"\n          name={props.unit}\n          className={styles.Field}\n          value={props.value}\n          onChange={props.onValueChange}\n        ></input>\n        <p className={styles.Label}>{props.unit}</p>\n      </div>\n      <div className={styles.Actions}>\n        {props.steps.map((step) => (\n          <button\n            key={step}\n            className={styles.Action}\n            onClick={(event) => props.onStepClick(event, step)}\n            name={props.unit}\n          >\n            <span className={styles.ActionIcon}>{step}</span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default UnitBox;\n","import React from \"react\";\nimport styles from \"./ToolBar.module.css\";\n\nconst ToolBar = (props) => (\n  <footer className={styles.ToolBar}>\n    <button className={styles.ResetButton} onClick={props.onClick}>\n      Reset\n    </button>\n  </footer>\n);\n\nexport default ToolBar;\n","import React from \"react\";\nimport UnitBox from \"../UnitBox/UnitBox\";\nimport ToolBar from \"../ToolBar/ToolBar\";\nimport styles from \"./UnitConverter.module.css\";\n\nconst UNITS = [\n  \"mL\",\n  \"teaspoon\",\n  \"tablespoon\",\n  \"cup\",\n  \"pint\",\n  \"quart\",\n  \"gallon\",\n];\nconst RATIOS = {\n  mL: 1,\n  teaspoon: 4.92892159375,\n  tablespoon: 4.92892159375 * 3,\n  cup: 236.5882365,\n  pint: 473.176473,\n  quart: 946.352946,\n  gallon: 3785.411784,\n};\nconst STEPS = [-1, -0.1, 0.1, 1];\n\nconst formatUnitValue = function formatUnitValue(value) {\n  return Number(value.toFixed(4));\n};\n\nconst isValidValue = function isValidValue(stringValue) {\n  const numberValue = Number(stringValue);\n\n  return stringValue !== \"\" && !Number.isNaN(numberValue);\n};\n\nconst defaultState = {\n  mg: 0,\n  activeUnit: \"g\",\n  activeUnitValue: \"0\",\n};\n\nclass UnitConverter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = defaultState;\n\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.handleStepChange = this.handleStepChange.bind(this);\n    this.handleResetClick = this.handleResetClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetState();\n  }\n\n  resetState() {\n    this.setState(defaultState);\n  }\n\n  handleValueChange(event) {\n    const activeUnit = event.target.name;\n    // const activeUnitValue =\n    //   event.nativeEvent.inputType === \"deleteContentBackward\"\n    //     ? \"\"\n    //     : event.target.value;\n    const activeUnitValue = event.target.value;\n    let numberValue;\n\n    if (!isValidValue(activeUnitValue)) {\n      this.setState({ mg: \"NaN\", activeUnit, activeUnitValue });\n      return;\n    }\n\n    numberValue = Number(activeUnitValue);\n    this.setState({\n      mg: numberValue * RATIOS[activeUnit],\n      activeUnit,\n      activeUnitValue,\n    });\n  }\n\n  handleStepChange(event, step) {\n    event.preventDefault();\n\n    const unit = event.currentTarget.name;\n    let unitValue = this.state.mg / RATIOS[unit];\n    let newMgValue;\n\n    if (!isValidValue(unitValue)) {\n      return;\n    }\n\n    unitValue += step;\n    newMgValue = unitValue * RATIOS[unit];\n    this.setState({\n      mg: newMgValue,\n      activeUnit: null,\n      activeUnitValue: null,\n    });\n  }\n\n  handleResetClick(event) {\n    this.resetState();\n  }\n\n  render() {\n    return (\n      <div className={styles.UnitConverter}>\n        <div className={styles.UnitBoxList}>\n          {UNITS.map((unit) => {\n            const value =\n              this.state.mg === \"NaN\"\n                ? \"\"\n                : formatUnitValue(this.state.mg / RATIOS[unit]);\n\n            return (\n              <UnitBox\n                key={unit}\n                unit={unit}\n                steps={STEPS}\n                value={\n                  unit === this.state.activeUnit\n                    ? this.state.activeUnitValue\n                    : value\n                }\n                onValueChange={this.handleValueChange}\n                onStepClick={this.handleStepChange}\n              />\n            );\n          })}\n        </div>\n        <ToolBar onClick={this.handleResetClick} />\n      </div>\n    );\n  }\n}\n\nexport default UnitConverter;\n","import React from \"react\";\nimport UnitConverter from \"../UnitConverter/UnitConverter\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UnitConverter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}